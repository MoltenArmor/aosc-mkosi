#!/bin/sh
set -ue

cd "$CHROOT_SRCDIR/aoscbootstrap/" && \
    ! [ -x "$CHROOT_BUILDDIR/target/release/aoscbootstrap" ] && \
    cargo build --release --target-dir "$CHROOT_BUILDDIR/target"

cat << 'EOT' > "$CHROOT_BUILDDIR/target/release/aosc-mainline.toml"
stub-packages = [
  "aosc-aaa",
  "apt",
  "gcc-runtime",
  "tar",
  "xz",
  "gnupg",
  "grep",
  "ca-certs",
  "iptables",
  "shadow",
  "systemd",
  "keyutils"
]
base-packages = [
  "bash-completion",
  "bash-startup",
  "iana-etc",
  "libidn",
  "tzdata"
]
EOT

cd "$CHROOT_BUILDDIR/target/release/" || exit 1
# Let's keep conservative.
if ! [ -d "$CHROOT_SRCDIR/mkosi.output/stage1/" ]; then
    # Let's just do stage1 because chroot inside sandbox will make /proc inaccessible.
    ./aoscbootstrap --stage1-only --config=aosc-mainline.toml stable "$CHROOT_SRCDIR/mkosi.output/stage1/" 2>&1 | tee aoscbootstrap.log
    # Let's rename the stage 2 script.
    script_fname="$(grep -F -m 1 'If you want to continue stage 2,' aoscbootstrap.log | grep -Eo '\.tmp[[:alnum:]]+')"
    cd "$CHROOT_SRCDIR/mkosi.output/stage1/" && mv "${script_fname}" stage2_script.sh
elif printf '%s' "$*" | grep -qF -- '--force'; then
    ./aoscbootstrap --force --stage1-only --config=aosc-mainline.toml stable "$CHROOT_SRCDIR/mkosi.output/stage1/" 2>&1 | tee aoscbootstrap.log
    # Let's rename the stage 2 script.
    script_fname="$(grep -F -m 1 'If you want to continue stage 2,' aoscbootstrap.log | grep -Eo '\.tmp[[:alnum:]]+')"
    cd "$CHROOT_SRCDIR/mkosi.output/stage1/" && mv "${script_fname}" stage2_script.sh
else
    printf '%s\n' 'The base-rootfs seems to have been built. If you want to rebuild it, remove it or run mkosi build -- --force.'
    exit 0
fi
